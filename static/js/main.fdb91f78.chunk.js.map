{"version":3,"sources":["images/Logo.png","firebaseConf/FirebaseConf.js","components/PasswordReset.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","firebaseConf","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","PasswordReset","state","email","handleChange","e","_this","setState","Object","defineProperty","target","type","value","console","log","this","sendPasswordResetEmail","then","catch","error","react_default","a","createElement","mdbreact","className","md","src","Logo","alt","label","icon","group","validate","success","onChange","color","size","onClick","resetPassword","Component","App","components_PasswordReset","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fdb91f78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.3aa9aef1.png\";","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyBkvp9ifqDeJNPNCH-0PK5QxZpNyZxxjrE\",\r\n    authDomain: \"burguer-queen-b6057.firebaseapp.com\",\r\n    databaseURL: \"https://burguer-queen-b6057.firebaseio.com\",\r\n    projectId: \"burguer-queen-b6057\",\r\n    storageBucket: \"burguer-queen-b6057.appspot.com\",\r\n    messagingSenderId: \"393144218466\"\r\n  };\r\n  const firebaseConf = firebase.initializeApp(config);\r\n\r\n  export default firebaseConf;","import React, { Component } from 'react';\r\nimport Logo from '../images/Logo.png'\r\nimport { Container, Row, Col, Input, Button } from 'mdbreact';\r\nimport firebaseConf from '../firebaseConf/FirebaseConf'\r\n\r\nclass PasswordReset extends Component {\r\n    state = {\r\n        email: ''\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState ({\r\n          [e.target.type]: e.target.value\r\n        })\r\n      }\r\n\r\n    resetPassword(){\r\n      console.log(this.state)\r\n        firebaseConf.sendPasswordResetEmail(this.state.email).then(function() {\r\n            // Email sent.\r\n          }).catch(function(error) {\r\n            // An error happened.\r\n          });\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <Container>\r\n        <Row className= \"row justify-content-md-center\">\r\n          <Col md=\"10\">\r\n          <img src={Logo} className=\"m-5 mx-auto d-block\" alt=\"logo\" />\r\n            <form>\r\n              <p className=\"h5 text-center mb-4\">Restaura tu contrase√±a</p>\r\n              <div className=\"grey-text\">\r\n                <Input label=\"Escribe tu email\" icon=\"envelope\" group type=\"email\" validate error=\"wrong\" success=\"right\" onChange={this.handleChange}/>\r\n              </div>\r\n              <div className=\"text-center mb-3\">\r\n                <Button color=\"warning\" className=\"mb-3\" size=\"lg\" onClick={this.resetPassword} >Enviar correo</Button>\r\n              </div>\r\n            </form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PasswordReset;","import React, { Component } from 'react';\n// import Login from './components/Login';\nimport PasswordReset from './components/PasswordReset';\nimport './App.css';\n// import NavbarApp from './components/NavbarApp';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <Login /> */}\n        {/* <NavbarApp /> */}\n        <PasswordReset />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  } else {\n    console.log(\"no registrarse sw Current env:\", process.env.NODE_ENV)\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      console.log(\"sw registrada\")\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}